import React, { useState, useRef } from 'react';

import './CDCatalog.css';

 

export default function CDCatalog() {  

  const [trList, setTrList] = useState([]);   // useState Hook 이용, 상태 변수 trList 배열 생성

  const msgDivRef = useRef();   // useRef Hook 이용, 아래의 <div> 엘리먼트에 대한 참조 변수 생성

  

  return (

    <div className="catalog">       

     Click button:

      <button onClick={

        () => {

          fetch('ex9/cd_catalog.json')

          .then(response => response.json())     

          .then(cds => {

            console.log(cds.CATALOG.CD);            

            // CD 배열의 각 원소인 cd 객체에 대해 <tr> 생성

            const trlist = cds.CATALOG.CD.map((cd, i) => (  

              <tr key={i}>                                          

                <td>{cd.TITLE}</td> 

                <td>{cd.ARTIST}</td> 

              </tr>

            ));

            const list = [           

              <tr key={trlist.length}><th>Artist</th><th>Title</th></tr>,         

              ...trlist

            ];                            // 제목 행과 trlist의 행들을 합쳐서 새로운 배열 생성

            setTrList(list);           // 기존 trList 상태 변수 값을 새로운 배열 list로 변경 -> re-rendering 실행

            msgDivRef.current.textContent = "generated by Ajax and React.";      // <div>에 출력     

          })

          .catch(error => console.error(error));           

        }

      }>Get my CD collection</button>

 

      <table>{trList}</table>             {/* trList의 원소(<tr>)들을 출력 */} 

      <div ref={msgDivRef}></div>    {/* msgDivRef가 이 엘리먼트를 참조함 */} 

      {/* clear button 생성 */} 

      {(trList.length > 0) ?          

        <button onClick={() => {

          setTrList([]);

          msgDivRef.current.textContent = "";        

        }}>Clear</button> 

        : null

      }       

    </div>

  );

}  

 

--------------------------------------------------------------------------------- 

 

import React, { useState, useRef } from 'react';

import './breakneck_new.css';

 

export default function PizzaApp() {  

 

  const [phone, setPhone] = useState("");

   

  const orderRef = useRef();   // useRef Hook 이용, <textarea name="order"> 엘리먼트에 대한 참조 변수 생성

  const addressRef = useRef();   // useRef Hook 이용, <textarea name="address"> 에 대한 참조 변수 생성

  const greetingRef = useRef();   // useRef Hook 이용, <span id="greeting"> 엘리먼트에 대한 참조 변수 생성

  const msgDivRef = useRef();   // useRef Hook 이용, <div id="resp"> 엘리먼트에 대한 참조 변수 생성

 

  const lookupCustomerUrl = "/AjaxLab/pizza_json/lookupCustomer_json.jsp?phone="; 

  const submitOrderUrl = "/AjaxLab/pizza_json/placeOrder_json.jsp";      

 

  const getCustomerInfo = e => {

    if (e.target.value === "") {         // e.target: 전화번호 입력 창 <input> 엘리먼트

      orderRef.current.value = "";       // 주문 입력 창 <textarea>

      addressRef.current.value = "";    // 주소 입력 창 <textarea>

    }

    else {

      fetch(lookupCustomerUrl + e.target.value)

      .then(response => {

        console.log(response);

        if (!response.ok) {

          alert(`Error! ${response.status} ${response.headers.get("Status")}`);

          throw new Error(response.status);

        }

        else return response.json();        // json data parsing -> JS 객체 생성

      })

      .then(customer => {

        console.log(customer);

        let address = customer.name + "\n"

          + customer.address.street + "\n"

          + customer.address.city + ", " 

          + customer.address.state + " " 

          + customer.address.zipCode;

        setPhone(e.target.value);

        orderRef.current.value = customer.recentOrder;     // 주문 창에 recentOrder 출력

        addressRef.current.value = address;          // 주소 창에 address 출력

        greetingRef.current.textContent = "Hi, "+ customer.name + "! ";

      })

      .catch(error => console.error(error));                       

    }      

  };

 

  const submitOrder = (e) => {

    e.preventDefault();

 

    const submitData = {     // 창에 입력된 값들로 객체 생성

      phone: phone, 

      address: { street: addressRef.current.value },   // city, state, zipCode는 생략 

      recentOrder: orderRef.current.value

    };

    

    fetch(submitOrderUrl, {   

      method: 'POST',   

      headers: {

        'Content-Type':'application/json'  

      },

      body: JSON.stringify(submitData)    // submitData 객체를 JSON 문자열로 변환

    })

    .then(response => response.text())      

    .then(deliveryTime => {

      msgDivRef.current.textContent = 

        `Your order should arrive within ${deliveryTime} minutes. Enjoy your pizza!`;

    })

    .catch(error => console.error(error));           

  };

  

  return (

    <div id="pizza">

      <div><img src="ex9/breakneck-logo_new.gif" alt="Break Neck Pizza" /></div>

      <form id="order-form" onSubmit={submitOrder}>

        <div>

          Enter your phone number:

          <input type="text" size="14" name="phone" 

            onBlur={getCustomerInfo} />

        </div>

        <div>

          <span id="greeting" ref={greetingRef}></span>

          Type your order in here:

          <textarea name="order" rows="6" cols="50" ref={orderRef} />

        </div>

        <div>

          Your order will be delivered to:

          <textarea name="address" rows="4" cols="50" ref={addressRef} />

        </div>

        <input type="submit" value="Order Pizza" />

        <div id="resp" ref={msgDivRef}></div>   {/* msgDivRef가 이 엘리먼트를 참조함 */} 

      </form>

    </div>

  );

}  